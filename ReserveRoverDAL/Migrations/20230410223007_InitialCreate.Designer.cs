// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReserveRoverDAL;

#nullable disable

namespace ReserveRoverDAL.Migrations
{
    [DbContext(typeof(ReserveRoverDbContext))]
    [Migration("20230410223007_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReserveRoverDAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("cities_pkey");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Чернівці"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Київ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Львів"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Location", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)")
                        .HasColumnName("longitude");

                    b.HasKey("PlaceId")
                        .HasName("locations_pkey");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Latitude = 48.291845m,
                            Longitude = 25.930247m
                        },
                        new
                        {
                            PlaceId = 2,
                            Latitude = 48.290586m,
                            Longitude = 25.935982m
                        },
                        new
                        {
                            PlaceId = 3,
                            Latitude = 50.439802m,
                            Longitude = 30.538339m
                        },
                        new
                        {
                            PlaceId = 4,
                            Latitude = 50.421874m,
                            Longitude = 30.466707m
                        },
                        new
                        {
                            PlaceId = 5,
                            Latitude = 50.480726m,
                            Longitude = 30.604961m
                        },
                        new
                        {
                            PlaceId = 6,
                            Latitude = 49.840546m,
                            Longitude = 24.024734m
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Moderation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("moderator_id")
                        .IsFixedLength();

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("moderation_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("moderation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb8fde55-ead5-4fd3-a770-603ef40e79f4"),
                            Date = new DateOnly(2023, 3, 8),
                            ModeratorId = "Mod1",
                            PlaceId = 1,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("383de7d6-127c-4cba-8d0d-7c5a5a9ef4a8"),
                            Date = new DateOnly(2023, 3, 28),
                            ModeratorId = "Mod2",
                            PlaceId = 2,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("9d50330d-6a94-417a-9a6a-11589e712499"),
                            Date = new DateOnly(2023, 4, 2),
                            ModeratorId = "Mod3",
                            PlaceId = 3,
                            Status = (short)2
                        },
                        new
                        {
                            Id = new Guid("5e593796-f5dd-4ea8-93a9-fa7e4caa514f"),
                            Date = new DateOnly(2023, 4, 17),
                            ModeratorId = "Mod4",
                            PlaceId = 4,
                            Status = (short)1
                        },
                        new
                        {
                            Id = new Guid("99c7a460-5616-44cc-b410-5929dfffe600"),
                            ModeratorId = "Mod5",
                            PlaceId = 5,
                            Status = (short)0
                        },
                        new
                        {
                            Id = new Guid("0fd2d2b3-e7f7-4eaf-a800-d5793719a4f1"),
                            Date = new DateOnly(2023, 4, 2),
                            ModeratorId = "Mod6",
                            PlaceId = 6,
                            Status = (short)2
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("address");

                    b.Property<decimal>("AvgBill")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("avg_bill");

                    b.Property<decimal?>("AvgMark")
                        .HasPrecision(2, 1)
                        .HasColumnType("numeric(2,1)")
                        .HasColumnName("avg_mark");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<TimeOnly>("ClosesAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("closes_at");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("manager_id")
                        .IsFixedLength();

                    b.Property<short>("ModerationStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("moderation_status");

                    b.Property<TimeOnly>("OpensAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("opens_at");

                    b.Property<DateOnly?>("PublicDate")
                        .HasColumnType("date")
                        .HasColumnName("public_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("places_pkey");

                    b.HasIndex("CityId");

                    b.ToTable("places", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Заньковецької, 20",
                            AvgBill = 600m,
                            AvgMark = 4.7m,
                            CityId = 1,
                            ClosesAt = new TimeOnly(20, 0, 0),
                            ManagerId = "M1",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(10, 0, 0),
                            PublicDate = new DateOnly(2023, 3, 8),
                            Title = "Familia Grande"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Небесної сотні 5а",
                            AvgBill = 300m,
                            CityId = 1,
                            ClosesAt = new TimeOnly(20, 0, 0),
                            ManagerId = "M2",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(8, 0, 0),
                            PublicDate = new DateOnly(2023, 3, 28),
                            Title = "Піца парк"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Івана Франка, 42Г",
                            AvgBill = 950m,
                            AvgMark = 4.8m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ManagerId = "M3",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(12, 0, 0),
                            PublicDate = new DateOnly(2023, 4, 2),
                            Title = "Pang"
                        },
                        new
                        {
                            Id = 4,
                            Address = "вул. академіка Амосова, 96В",
                            AvgBill = 800m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ManagerId = "M4",
                            ModerationStatus = (short)1,
                            OpensAt = new TimeOnly(10, 30, 0),
                            Title = "LAPASTA"
                        },
                        new
                        {
                            Id = 5,
                            Address = "вул. Івана Мазепи, 17Е",
                            AvgBill = 400m,
                            CityId = 2,
                            ClosesAt = new TimeOnly(22, 0, 0),
                            ManagerId = "M5",
                            ModerationStatus = (short)0,
                            OpensAt = new TimeOnly(13, 0, 0),
                            Title = "Пікантіко"
                        },
                        new
                        {
                            Id = 6,
                            Address = "вул. Січевих Стрільців, 119Б, заїзд з пр. Дорошенка",
                            AvgBill = 1250m,
                            AvgMark = 4.6m,
                            CityId = 3,
                            ClosesAt = new TimeOnly(21, 30, 0),
                            ManagerId = "M6",
                            ModerationStatus = (short)2,
                            OpensAt = new TimeOnly(11, 30, 0),
                            PublicDate = new DateOnly(2023, 4, 2),
                            Title = "Ребра та вогонь"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceImage", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("SequenceIndex")
                        .HasColumnType("smallint")
                        .HasColumnName("sequence_index");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("character varying(105)")
                        .HasColumnName("image_url");

                    b.HasKey("PlaceId", "SequenceIndex")
                        .HasName("place_images_pkey");

                    b.ToTable("place_images", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/1606a7ce-cf02-46c4-a097-7fe6759bde43.png"
                        },
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/11/foto-prosciutto-pear11.jpg"
                        },
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/10/prosciuttopear.jpg"
                        },
                        new
                        {
                            PlaceId = 1,
                            SequenceIndex = (short)3,
                            ImageUrl = "https://famigliagrande.ua/wp-content/uploads/2022/10/foto-angel.jpg"
                        },
                        new
                        {
                            PlaceId = 2,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/0627f92845e66bd4fdb662e3e6129ccc.png"
                        },
                        new
                        {
                            PlaceId = 2,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://fastly.4sqi.net/img/general/600x600/186926302_7174fhsnxGKw_KYjrmEl6Mro1oz6NwjaygTiWZEsJUI.jpg"
                        },
                        new
                        {
                            PlaceId = 2,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://fastly.4sqi.net/img/general/600x600/51690195_-M0XtE0y0jbTS9sUFC7C72Q9rXxVSUNqmpjuO6v6O_0.jpg"
                        },
                        new
                        {
                            PlaceId = 3,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/2821669b-9921-4af9-acf8-a9b7e2e49a14.png"
                        },
                        new
                        {
                            PlaceId = 3,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://assets.dots.live/misteram-public/f210f2ed-5e88-4ac6-8a88-d7bb1e8e0188-826x0.png"
                        },
                        new
                        {
                            PlaceId = 3,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://travel.chernivtsi.ua/storage/posts/July2022/vxr25w9G6MqZd4qYRdiN.jpg"
                        },
                        new
                        {
                            PlaceId = 4,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/f1d85bcd-7b2f-4180-8a89-b55ad10fe019.png"
                        },
                        new
                        {
                            PlaceId = 4,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://lh3.googleusercontent.com/p/AF1QipO2b0cC1uaE836xZwwHE1OeiA_dDi_e41vL1UFt=w1080-h608-p-no-v0"
                        },
                        new
                        {
                            PlaceId = 5,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/7b5d6db7213f6e9d012f625024b94cb7.png"
                        },
                        new
                        {
                            PlaceId = 5,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://pyvtrest.com.ua/images/C43D7D64-90E1-418C-B4DE-F18C038D0F47.jpeg"
                        },
                        new
                        {
                            PlaceId = 5,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://files.ratelist.top/uploads/images/bs/71875/photos/660872aa5b09e20adc70fdf8628f3e66-original.webp"
                        },
                        new
                        {
                            PlaceId = 6,
                            SequenceIndex = (short)0,
                            ImageUrl = "https://assets.dots.live/misteram-public/fd01592e-08b9-4058-bd77-dcfd74201b72.png"
                        },
                        new
                        {
                            PlaceId = 6,
                            SequenceIndex = (short)1,
                            ImageUrl = "https://lh3.googleusercontent.com/p/AF1QipNdBerwXQBA6Ltb4Am5snYPi2e0Ph2lvtu4Io_S=s1360-w1360-h1020"
                        },
                        new
                        {
                            PlaceId = 6,
                            SequenceIndex = (short)2,
                            ImageUrl = "https://onedeal.com.ua/wp-content/uploads/2021/02/2018-07-17-4-1.jpg"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacePaymentMethod", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("Method")
                        .HasColumnType("smallint")
                        .HasColumnName("method");

                    b.HasKey("PlaceId", "Method")
                        .HasName("place_payment_methods_pkey");

                    b.ToTable("place_payment_methods", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 1,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 2,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 3,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 3,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 4,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 4,
                            Method = (short)1
                        },
                        new
                        {
                            PlaceId = 5,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 6,
                            Method = (short)0
                        },
                        new
                        {
                            PlaceId = 6,
                            Method = (short)1
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacesDescription", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.HasKey("PlaceId")
                        .HasName("places_descriptions_pkey");

                    b.ToTable("places_descriptions", (string)null);

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Description = "Famiglia Grande – справжня Неаполітанська Піцерія,яка поєднує в собі найкращі традиції приготування піци.\n\nТільки справжня піч - ми випікаємо нашу піцу в справжній італійській печі при температурі 400 С, від всесвітньо відомого виробника. Завдяки цьому піца Famiglia Grande має досконалий неаполітанський смак. Спеціальне борошно - ми використовуємо італійське цільнозернове борошно найвищої якості. Воно створене спеціально для тіста тривалого визрівання, з додаванням закваски для ферментації. Саме тому піца Famiglia Grande така смачна та низькокалорійна.\n\nФерментоване тісто на заквасці - наше тісто визріває 32 години........... ! Фірмовий італійський соус Pomodoro - соус для нашої піци готується з очищених перетертих томатів, привезених прямо з сонячної Італії.Справжня італійська Моцарелла - традиційно входить до складу неаполітанської піци. Це молодий сир. У кожну піцу ми додаємо саме його. Піцайоло - смак нашої піци залежить від його вміння, досвіду та натхнення. Тому люди, які готують для Вас, пройшли відмінну школу у провідного майстра."
                        },
                        new
                        {
                            PlaceId = 2,
                            Description = "Ваші улюблені, перевірені часом страви, затишна атмосефера, фірмова піца.У нас смачно."
                        },
                        new
                        {
                            PlaceId = 3,
                            Description = "'Pang' - це в першу чергу про смак та турботу. Поняття азіатської кухні асоціюється з корисними свіжими продуктами, легкими стравами і маленькими смачними закусками. Азіатська кухня - це можливість експериментувати зі смаками і коштувати самі незвичайні поєднання продуктів, відкриваючи для себе незвичайний світ традицій та екзотики! З нами ти відчуєш усі відтінки смаків, від гострого до солодкого. Поринь в атмосферу східної культури!"
                        },
                        new
                        {
                            PlaceId = 4,
                            Description = "LAPASTA - енотека/пастерія. 👨🏻‍🍳🍕\nСімейний ресторан справжньої італійської кухні.\nВ нашому меню можна зустріти всю палітру смаків Італії.\nНаша піца - це кращі італійські традиції.\nГарячі страви та салати - невимовна насолода від шеф кухаря."
                        },
                        new
                        {
                            PlaceId = 5,
                            Description = "Пікантіко - смачна домашня кухня за помірними цінами. Великий асортимент пива: завжди свіже розливне крафтове пиво, від кращих пивоварень. Закуски до пива: свинні вушка, крендель, домашні чіпси, чебурек величезного розміру. Піцца на любий смак за помірними цінами."
                        },
                        new
                        {
                            PlaceId = 6,
                            Description = "Рецепт наших ребер ми випробовували аж три роки. А щоб вони були правдивими, ми розробили спеціальні мангали (єдині у своєму роді), що дозволяють готувати на відкритому вогні, аби ребра виходили зі скоринкою та присмаком диму. Як любиш готувати ребра самотужки – нема питань, можеш придбати наш маринад окремо. Смакує він добре, і не лише до ребер. Ми – демократичний заклад, тому тут не маємо посуду та їмо руками (ну, й так, зрештою, смачніше). І, певна річ, до нас вхід без краваток."
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<TimeOnly>("BeginTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("begin_time");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<short>("PeopleNum")
                        .HasColumnType("smallint")
                        .HasColumnName("people_num");

                    b.Property<DateOnly>("ReservDate")
                        .HasColumnType("date")
                        .HasColumnName("reserv_date");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("user_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("reservations_pkey");

                    b.HasIndex("TableId");

                    b.ToTable("reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b625d67-10e4-4000-997d-3a6b586d6a97"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 10, 7, 20, 58, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 12),
                            Status = (short)2,
                            TableId = 1,
                            UserId = "U1"
                        },
                        new
                        {
                            Id = new Guid("ac230e8e-b750-4305-b17a-8a6d55e57af7"),
                            BeginTime = new TimeOnly(16, 30, 0),
                            CreationDateTime = new DateTime(2023, 4, 5, 17, 3, 34, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(19, 30, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 12),
                            Status = (short)1,
                            TableId = 1,
                            UserId = "U2"
                        },
                        new
                        {
                            Id = new Guid("695d5278-9533-4e70-86d0-f3f2d9dd0435"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 8, 16, 18, 2, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 12),
                            Status = (short)2,
                            TableId = 1,
                            UserId = "U3"
                        },
                        new
                        {
                            Id = new Guid("cee5cd06-d680-4ad2-b4f3-3edca0bfc004"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 16, 21, 46, 27, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 22),
                            Status = (short)0,
                            TableId = 1,
                            UserId = "U4"
                        },
                        new
                        {
                            Id = new Guid("e57b3f43-520c-407d-9739-7b7b2a1bfb1e"),
                            BeginTime = new TimeOnly(17, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 19, 13, 6, 12, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(19, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 22),
                            Status = (short)0,
                            TableId = 1,
                            UserId = "U5"
                        },
                        new
                        {
                            Id = new Guid("08cc4909-f414-4e48-a1b8-481c1691672c"),
                            BeginTime = new TimeOnly(11, 30, 0),
                            CreationDateTime = new DateTime(2023, 4, 5, 19, 46, 11, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(13, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 9),
                            Status = (short)0,
                            TableId = 15,
                            UserId = "U6"
                        },
                        new
                        {
                            Id = new Guid("60290d67-2f37-4d97-9961-55041757b481"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 9, 8, 57, 15, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)4,
                            ReservDate = new DateOnly(2023, 4, 10),
                            Status = (short)0,
                            TableId = 16,
                            UserId = "U7"
                        },
                        new
                        {
                            Id = new Guid("ef209645-63f0-46a1-9b05-db57c0662828"),
                            BeginTime = new TimeOnly(14, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 11, 15, 7, 4, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(16, 0, 0),
                            PeopleNum = (short)2,
                            ReservDate = new DateOnly(2023, 4, 17),
                            Status = (short)1,
                            TableId = 15,
                            UserId = "U8"
                        },
                        new
                        {
                            Id = new Guid("93b18e55-97f3-40c6-b114-01fb0ad3a6ec"),
                            BeginTime = new TimeOnly(16, 0, 0),
                            CreationDateTime = new DateTime(2023, 4, 20, 23, 42, 9, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(18, 30, 0),
                            PeopleNum = (short)5,
                            ReservDate = new DateOnly(2023, 4, 29),
                            Status = (short)0,
                            TableId = 17,
                            UserId = "U9"
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("character(28)")
                        .HasColumnName("author_id")
                        .IsFixedLength();

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<decimal>("Mark")
                        .HasPrecision(1)
                        .HasColumnType("numeric(1)")
                        .HasColumnName("mark");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("329320cf-ae4b-4cce-ab19-0a3c543bcb85"),
                            AuthorId = "U1",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 9),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("dc54019c-1d9b-4a85-bc6d-273716f80a25"),
                            AuthorId = "U2",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 11),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("461cfc67-0161-48e1-94b1-f1072f120799"),
                            AuthorId = "U10",
                            Comment = "Сама смачна піцца в Че. Я ваш клієнт на віки-вічні",
                            CreationDate = new DateOnly(2023, 4, 12),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("67f57dbd-028b-4ee6-885a-0933ed1c2afc"),
                            AuthorId = "U11",
                            Comment = "Піца була смачна. Рекомендую)",
                            CreationDate = new DateOnly(2023, 4, 13),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("436931b5-6f4a-4c23-a521-5eb214110727"),
                            AuthorId = "U12",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 14),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("c786f93c-ef40-44cd-886d-8d405fc6a6c0"),
                            AuthorId = "U13",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 17),
                            Mark = 5m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("b4deca11-7b7c-4cb0-8a21-52067f112235"),
                            AuthorId = "U14",
                            Comment = "Вже другий раз не дають прибори.",
                            CreationDate = new DateOnly(2023, 4, 18),
                            Mark = 4m,
                            PlaceId = 1
                        },
                        new
                        {
                            Id = new Guid("9c515fec-fc20-4fee-a436-5be3ec77f616"),
                            AuthorId = "U15",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 5),
                            Mark = 5m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("4ae51fc6-1d00-4786-81bc-8baf72637ed7"),
                            AuthorId = "U16",
                            Comment = "Страви не підписані, мусили вгадувати.",
                            CreationDate = new DateOnly(2023, 4, 14),
                            Mark = 4m,
                            PlaceId = 3
                        },
                        new
                        {
                            Id = new Guid("82c66039-fb8b-4a04-8b42-3d825412cf6c"),
                            AuthorId = "U17",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 4),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("57a7cd73-1959-424d-8ec8-803532e5d539"),
                            AuthorId = "U18",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 8),
                            Mark = 4m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("6c59268e-e86c-4b1b-97da-598dd48dbf49"),
                            AuthorId = "U19",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 9),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("036ce13b-00ae-45b3-9ce6-03e89323ddc4"),
                            AuthorId = "U20",
                            Comment = "Копчене курча бездоганне, а от свиня за життя займалася фітнесом, міцна та підтягнута занадто)",
                            CreationDate = new DateOnly(2023, 4, 11),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("b920c561-5055-4552-838d-8959cdd234f9"),
                            AuthorId = "U21",
                            Comment = "Такої смачної їжі давно не куштувала",
                            CreationDate = new DateOnly(2023, 4, 12),
                            Mark = 5m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("ec67b623-7763-4b80-950e-6a213ce16f35"),
                            AuthorId = "U22",
                            Comment = "Шашлик з купою жил, сала, ледь жувався.",
                            CreationDate = new DateOnly(2023, 4, 16),
                            Mark = 3m,
                            PlaceId = 6
                        },
                        new
                        {
                            Id = new Guid("85ff3813-ab3b-47b2-af20-9e365ea294c3"),
                            AuthorId = "U23",
                            Comment = "",
                            CreationDate = new DateOnly(2023, 4, 16),
                            Mark = 5m,
                            PlaceId = 6
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<short>("TableCapacity")
                        .HasColumnType("smallint")
                        .HasColumnName("table_type");

                    b.Property<short>("TablesNum")
                        .HasColumnType("smallint")
                        .HasColumnName("tables_num");

                    b.HasKey("Id")
                        .HasName("tables_pkey");

                    b.HasIndex("PlaceId");

                    b.ToTable("tables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            TableCapacity = (short)2,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            TableCapacity = (short)3,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 1,
                            TableCapacity = (short)4,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 1,
                            TableCapacity = (short)6,
                            TablesNum = (short)1
                        },
                        new
                        {
                            Id = 5,
                            PlaceId = 2,
                            TableCapacity = (short)2,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 6,
                            PlaceId = 2,
                            TableCapacity = (short)4,
                            TablesNum = (short)5
                        },
                        new
                        {
                            Id = 7,
                            PlaceId = 3,
                            TableCapacity = (short)3,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 8,
                            PlaceId = 3,
                            TableCapacity = (short)4,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 9,
                            PlaceId = 3,
                            TableCapacity = (short)6,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 10,
                            PlaceId = 4,
                            TableCapacity = (short)1,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 11,
                            PlaceId = 4,
                            TableCapacity = (short)2,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 12,
                            PlaceId = 5,
                            TableCapacity = (short)2,
                            TablesNum = (short)3
                        },
                        new
                        {
                            Id = 13,
                            PlaceId = 5,
                            TableCapacity = (short)4,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 14,
                            PlaceId = 5,
                            TableCapacity = (short)5,
                            TablesNum = (short)2
                        },
                        new
                        {
                            Id = 15,
                            PlaceId = 6,
                            TableCapacity = (short)2,
                            TablesNum = (short)6
                        },
                        new
                        {
                            Id = 16,
                            PlaceId = 6,
                            TableCapacity = (short)4,
                            TablesNum = (short)4
                        },
                        new
                        {
                            Id = 17,
                            PlaceId = 6,
                            TableCapacity = (short)5,
                            TablesNum = (short)1
                        });
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Location", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithOne("Location")
                        .HasForeignKey("ReserveRoverDAL.Entities.Location", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("locations_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Moderation", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("Moderations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("moderation_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.City", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("places_city_id_fkey");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlaceImage", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("PlaceImages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("place_images_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacePaymentMethod", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("PlacePaymentMethods")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("place_payment_methods_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.PlacesDescription", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("places_descriptions_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Reservation", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reservations_table_id_fkey");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Review", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Table", b =>
                {
                    b.HasOne("ReserveRoverDAL.Entities.Place", "Place")
                        .WithMany("Tables")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tables_place_id_fkey");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.City", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Place", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Moderations");

                    b.Navigation("PlaceImages");

                    b.Navigation("PlacePaymentMethods");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ReserveRoverDAL.Entities.Table", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
